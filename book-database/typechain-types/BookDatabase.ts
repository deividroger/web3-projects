/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace BookDatabase {
  export type BookStruct = { title: string; year: BigNumberish };

  export type BookStructOutput = [title: string, year: bigint] & {
    title: string;
    year: bigint;
  };
}

export interface BookDatabaseInterface extends Interface {
  getFunction(
    nameOrSignature: "addBook" | "books" | "count" | "editBook" | "removeBook"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addBook",
    values: [BookDatabase.BookStruct]
  ): string;
  encodeFunctionData(functionFragment: "books", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "editBook",
    values: [BigNumberish, BookDatabase.BookStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBook",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addBook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "books", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "editBook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeBook", data: BytesLike): Result;
}

export interface BookDatabase extends BaseContract {
  connect(runner?: ContractRunner | null): BookDatabase;
  waitForDeployment(): Promise<this>;

  interface: BookDatabaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBook: TypedContractMethod<
    [newBook: BookDatabase.BookStruct],
    [void],
    "nonpayable"
  >;

  books: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { title: string; year: bigint }],
    "view"
  >;

  count: TypedContractMethod<[], [bigint], "view">;

  editBook: TypedContractMethod<
    [id: BigNumberish, newBook: BookDatabase.BookStruct],
    [void],
    "nonpayable"
  >;

  removeBook: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBook"
  ): TypedContractMethod<
    [newBook: BookDatabase.BookStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "books"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { title: string; year: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "editBook"
  ): TypedContractMethod<
    [id: BigNumberish, newBook: BookDatabase.BookStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeBook"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  filters: {};
}
